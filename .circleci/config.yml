version: 2

defaults: &defaults
  working_directory: ~/repo

fast-checkout: &attach-workspace
  attach_workspace:
    at: ~/repo

restore-app-image: &restore-app-image
  run:
    name: Restore app image
    command: docker load -i app-image.tar

jobs:
  checkout:
    <<: *defaults
    docker:
      - image: node
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/repo
          paths: .

  dashboard-install:
    <<: *defaults
    docker:
      - image: circleci/node:8
    steps:
      - *attach-workspace

      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - node-v1-{{ .Branch }}-{{ checksum "dashboard/package-lock.json" }}
            - node-v1-{{ .Branch }}-
            - node-v1-

      - run: npm ci --prefix dashboard

      - save_cache:
          paths:
            - dashboard/node_modules  # location depends on npm version
          key: node-v1-{{ .Branch }}-{{ checksum "dashboard/package-lock.json" }}

      - persist_to_workspace:
          root: ~/repo
          paths: dashboard

  dashboard-build:
    <<: *defaults
    docker:
      - image: circleci/node:8
    steps:
      - *attach-workspace
      - run:
          name: Build Dashboard
          command: PUBLIC_URL=' ' npm run build --prefix dashboard
      - persist_to_workspace:
          root: ~/repo
          paths: dashboard

  backend-install:
    <<: *defaults
    docker:
      - image: circleci/openjdk:8
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: ./gradlew dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

  backend-build:
    <<: *defaults
    docker:
      - image: circleci/openjdk:8
    steps:
      - *attach-workspace
      - setup_remote_docker
      - run:
          name: Build server
          command: ./gradlew build -x test
      - run:
          name: Build app Docker image
          command: docker build -t app .
      - run:
          name: Persist app image
          command: docker save -o app-image.tar app
      - persist_to_workspace:
          root: ~/repo
          paths: .

  backend-unit-tests:
    <<: *defaults
    machine: true
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - *attach-workspace
      - run:
          name: Start mongo & rabbit
          command: .circleci/run_compose.sh up -d mongo rabbit
      - run:
          name: Server's UT & IT
          command: ./gradlew test --tests test.*
      - store_test_results:
          path: build/test-results

  e2e-tests:
    <<: *defaults
    machine:
      image: ubuntu-1604:201903-01
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - *attach-workspace
      - *restore-app-image
      - run:
          name: Download Selenium
          command: curl -O http://selenium-release.storage.googleapis.com/3.5/selenium-server-standalone-3.5.3.jar
      - run: mkdir test-reports
      - run:
          name: Start Selenium
          command: java -jar selenium-server-standalone-3.5.3.jar -log test-reports/selenium.log
          background: true
      - run:
          name: Start app
          command: .circleci/run_compose.sh up -d
      - run:
          name: E2E tests against dockered app
          command: ./gradlew test -Ptags=core-tests -DstartApp=no --scan
      - store_test_results:
          path: build/test-results
      - store_artifacts:
          path: /tmp/ticktok-artifacts
      - store_artifacts:
          path: test-reports
      - store_test_results:
          path: build/test-results

  sandbox-tests:
    <<: *defaults
    machine: true
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - *attach-workspace
      - *restore-app-image
      - run:
          name: Start as sandbox
          command: .circleci/run_compose_sandbox.sh up -d app
      - run:
          name: Sandbox sanity testing
          command: ./gradlew test -Ptags=http-broker-tests -DstartApp=no --scan
      - run:
          name: Collect app logs
          command: .circleci/run_compose.sh logs > /tmp/ticktok-artifacts/compose.logs
          when: on_fail
      - store_artifacts:
          path: /tmp/ticktok-artifacts
      - store_test_results:
          path: build/test-results

  heroku-deploy:
    <<: *defaults
    docker:
      - image: circleci/node:latest
    steps:
      - *attach-workspace
      - *restore-app-image
      - run:
          name: Setup heroku
          command: .circleci/heroku_setup.sh
      - run:
          name: Deploy ticktok server (Heroku)
          no_output_timeout: 5m
          command: .circleci/deploy_to_heroku.sh

  dockerhub-publish:
    <<: *defaults
    docker:
      - image: buildpack-deps:trusty
    steps:
      - *attach-workspace
      - *restore-app-image
      - setup_remote_docker
      - run:
          name: Publish to dockerhub
          command: |
            if [[ "${CIRCLE_BRANCH}" == "master" ]] || [[ "${CIRCLE_BRANCH}" == realease-* ]]; then
              .circleci/publish_to_dockerhub.sh
            fi


workflows:
  version: 2
  build-and-deploy:
    jobs:
      - checkout
      - dashboard-install:
          requires:
            - checkout
      - dashboard-build:
          requires:
            - dashboard-install
      - backend-install:
          requires:
            - checkout
      - backend-build:
          requires:
            - dashboard-build
            - backend-install
      - backend-unit-tests:
          requires:
            - backend-build
      - e2e-tests:
          requires:
            - backend-build
      - sandbox-tests:
          requires:
            - backend-build
      - heroku-deploy:
          requires:
            - backend-unit-tests
            - e2e-tests
            - sandbox-tests
          filters:
            branches:
              only:
                - master
      - dockerhub-publish:
          requires:
            - heroku-deploy
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/





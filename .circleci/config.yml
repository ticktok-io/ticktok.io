version: 2

defaults: &defaults
  working_directory: ~/repo

fast-checkout: &attach-workspace
  attach_workspace:
    at: ~/repo

restore-app-image: &restore-app-image
  run:
    name: Restore app image
    command: docker load -i app-image.tar

java-docker: &java-docker
  docker:
    - image: circleci/openjdk:11


jobs:
  checkout:
    <<: *defaults
    docker:
      - image: node
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/repo
          paths: .

  dashboard-pack:
    <<: *defaults
    docker:
      - image: circleci/node:12
    steps:
      - *attach-workspace
      - run: .circleci/get-dashboard.sh
      - persist_to_workspace:
          root: ~/repo
          paths: dashboard

  backend-install:
    <<: *defaults
    <<: *java-docker
    steps:
      - *attach-workspace
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: ./gradlew dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

  backend-build:
    <<: *defaults
    docker:
      - image: circleci/openjdk:11
    steps:
      - *attach-workspace
      - setup_remote_docker
      - run:
          name: Build server
          command: ./gradlew build -x test
      - run:
          name: Build app Docker image
          command: docker build -t app .
      - run:
          name: Persist app image
          command: docker save -o app-image.tar app
      - persist_to_workspace:
          root: ~/repo
          paths: .

  backend-unit-tests:
    <<: *defaults
    docker:
      - image: circleci/openjdk:11
      - image: rabbitmq:3-management-alpine
        hostname: ticktok-rabbit
      - image: mongo:3.6
        command: --storageEngine ephemeralForTest
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - *attach-workspace
      - run:
          name: Server's UT & IT
          command: ./gradlew test --tests test.*
      - store_test_results:
          path: build/test-results

  e2e-tests:
    <<: *defaults
    machine:
      image: ubuntu-1604:201903-01
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - *attach-workspace
      - *restore-app-image
      - run:
          name: Install Java 11
          command: .circleci/install_java11.sh
      - run:
          name: Start app
          command: .circleci/run_compose.sh up -d
      - run:
          name: E2E tests against dockered app
          command: ./gradlew test -Ptags=core-tests -DstartApp=no --scan
      - store_test_results:
          path: build/test-results

  dashboard-tests:
    <<: *defaults
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - *attach-workspace
      - *restore-app-image
      - run:
          name: Install node@v12.14.0
          command: .circleci/upgrade_node.sh
      - run:
          name: Start app
          command: TICKTOK_IMAGE=app docker-compose -f dashboard/docker-compose.yml up -d
      - run:
          name: Install dependencies
          command: npm ci --prefix dashboard
      - run:
          name: Dashboard tests
          command: HOST=http://localhost:9643 npm run spec --prefix dashboard
      - store_test_results:
          path: dashboard/test-results
      - store_artifacts:
          path: dashboard/screenshots

  sandbox-tests:
    <<: *defaults
    machine:
      image: ubuntu-1604:201903-01
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - *attach-workspace
      - *restore-app-image
      - run:
          name: Install Java 11
          command: .circleci/install_java11.sh
      - run:
          name: Start as sandbox
          command: .circleci/run_compose_sandbox.sh up -d app && sleep 10
      - run:
          name: Sandbox sanity testing
          command: ./gradlew test -Ptags=http-broker-tests -DstartApp=no --scan
      - run:
          name: Collect app logs
          command: mkdir /tmp/ticktok-artifacts && .circleci/run_compose.sh logs > /tmp/ticktok-artifacts/compose.logs
          when: on_fail
      - store_artifacts:
          path: /tmp/ticktok-artifacts
      - store_test_results:
          path: build/test-results

  heroku-deploy:
    <<: *defaults
    <<: *java-docker
    steps:
      - setup_remote_docker
      - *attach-workspace
      - *restore-app-image
      - run:
          name: Setup heroku
          command: .circleci/heroku_setup.sh
      - run:
          name: Deploy ticktok server (Heroku)
          no_output_timeout: 5m
          command: .circleci/deploy_to_heroku.sh

  dockerhub-publish-master:
    <<: *defaults
    <<: *java-docker
    steps:
      - setup_remote_docker
      - *attach-workspace
      - *restore-app-image
      - run:
          name: Publish master to dockerhub
          command: .circleci/publish_to_dockerhub.sh master

  dockerhub-publish:
    <<: *defaults
    <<: *java-docker
    steps:
      - setup_remote_docker
      - *attach-workspace
      - *restore-app-image
      - run:
          name: Publish to dockerhub
          command: .circleci/publish_to_dockerhub.sh


workflows:
  version: 2
  build-and-deploy:
    jobs:
      - checkout:
          filters:
            tags:
              only: /.*/
      - dashboard-pack:
          requires:
            - checkout
          filters:
            tags:
              only: /.*/
      - backend-install:
          requires:
            - checkout
          filters:
            tags:
              only: /.*/
      - backend-build:
          requires:
            - dashboard-pack
            - backend-install
          filters:
            tags:
              only: /.*/
      - backend-unit-tests:
          requires:
            - backend-build
          filters:
            tags:
              only: /.*/
      - e2e-tests:
          requires:
            - backend-build
          filters:
            tags:
              only: /.*/
      - dashboard-tests:
          requires:
            - backend-build
          filters:
            tags:
              only: /.*/
      - sandbox-tests:
          requires:
            - backend-build
          filters:
            tags:
              only: /.*/
      - heroku-deploy:
          requires:
            - backend-unit-tests
            - e2e-tests
            - sandbox-tests
          filters:
            branches:
              only:
                - master
      - dockerhub-publish-master:
          requires:
            - backend-unit-tests
            - e2e-tests
            - sandbox-tests
          filters:
            branches:
              only:
                - master
      - dockerhub-publish:
          requires:
            - backend-unit-tests
            - e2e-tests
            - sandbox-tests
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/





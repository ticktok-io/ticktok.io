buildscript {
    ext.kotlinVersion = '1.4.10'
    ext.cache2kVersion = '1.2.4.Final'
    ext.swaggerVersion = '2.8.0'
    ext.lombokVersion = '1.18.16'
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.3'
    }
}


plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '2.3.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.3.70'
}


sourceCompatibility = 11
targetCompatibility = 11

bootJar {
    mainClassName = 'io.ticktok.server.Application'
    archiveFileName = 'ticktok-io.jar'
}


repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    configurations {
        all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
    }

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"


    // Spring
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation "org.springframework.boot:spring-boot-starter-log4j2"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    implementation "org.springframework.boot:spring-boot-starter-amqp"

    // Swagger
    compile "io.springfox:springfox-swagger2:${swaggerVersion}"
//    compile "io.springfox:springfox-swagger-ui:${swaggerVersion}"

    compile "org.eclipse.jetty:jetty-webapp:9.3.+"
    compile "org.eclipse.jetty:jetty-jsp:9.2.+"

    compile "org.hibernate.validator:hibernate-validator:6.1.2.Final"
    compile "javax.validation:validation-api:2.0.1.Final"

    compile "com.google.code.gson:gson:2.8.2"


    implementation "org.cache2k:cache2k-api:${cache2kVersion}"
    runtimeOnly "org.cache2k:cache2k-core:${cache2kVersion}"


    // ======================= Tests ==========================
    testCompile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion"

    // JUnit 5
    testRuntimeOnly "org.junit.jupiter:junit-jupiter:5.7.0"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-params:5.7.0'

    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "org.mockito:mockito-core:3.5.15"

    //Spring
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile "org.springframework.security:spring-security-test"

    //Other
    testCompile "org.apache.httpcomponents:httpclient:4.5.5"
    testCompile "org.apache.httpcomponents:fluent-hc:4.5.5"
    testCompile 'org.assertj:assertj-core:3.11.1'
    testCompile "org.awaitility:awaitility-kotlin:4.0.2"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task copy_dashboard(type: Copy) {
    from "dashboard/build"
    into "src/main/resources/public"
}

compileJava {
    dependsOn copy_dashboard
}

task cleanDashboard(type: Delete) {
    delete "$projectDir/src/main/resources/public"
}

clean {
    dependsOn cleanDashboard
}

test {
    systemProperty "startApp", System.getProperty("startApp")
    useJUnitPlatform {
        if (project.hasProperty('tags')) {
            includeTags project.getProperties()['tags'] as String
        }
    }
}

buildScan { termsOfServiceUrl = 'https://gradle.com/terms-of-service'; termsOfServiceAgree = 'yes' }
